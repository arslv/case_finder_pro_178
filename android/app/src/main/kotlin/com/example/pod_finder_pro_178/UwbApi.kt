// Autogenerated from Pigeon (v17.3.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon


import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  if (exception is FlutterError) {
    return listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    return listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

private fun createConnectionError(channelName: String): FlutterError {
  return FlutterError("channel-error",  "Unable to establish connection on channel: '$channelName'.", "")}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

enum class DeviceType(val raw: Int) {
  SMARTPHONE(0),
  WATCH(1),
  TABLET(2),
  OTHER(3);

  companion object {
    fun ofRaw(raw: Int): DeviceType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class DeviceState(val raw: Int) {
  DISCONNECTED(0),
  CONNECTING(1),
  CONNECTED(2),
  RANGING(3);

  companion object {
    fun ofRaw(raw: Int): DeviceState? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class UwbDevice (
  val id: String? = null,
  val name: String? = null,
  val deviceType: DeviceType? = null,
  val state: DeviceState? = null,
  val distance: Double? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): UwbDevice {
      val id = list[0] as String?
      val name = list[1] as String?
      val deviceType: DeviceType? = (list[2] as Int?)?.let {
        DeviceType.ofRaw(it)
      }
      val state: DeviceState? = (list[3] as Int?)?.let {
        DeviceState.ofRaw(it)
      }
      val distance = list[4] as Double?
      return UwbDevice(id, name, deviceType, state, distance)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      id,
      name,
      deviceType?.raw,
      state?.raw,
      distance,
    )
  }
}
@Suppress("UNCHECKED_CAST")
private object UwbHostApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          UwbDevice.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is UwbDevice -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface UwbHostApi {
  fun isUwbSupported(): Boolean
  fun startDiscovery(deviceName: String)
  fun stopDiscovery()
  fun startRanging(device: UwbDevice)
  fun stopRanging(device: UwbDevice)
  fun handleConnectionRequest(device: UwbDevice, accept: Boolean)

  companion object {
    /** The codec used by UwbHostApi. */
    val codec: MessageCodec<Any?> by lazy {
      UwbHostApiCodec
    }
    /** Sets up an instance of `UwbHostApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: UwbHostApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.uwb.UwbHostApi.isUwbSupported", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.isUwbSupported())
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.uwb.UwbHostApi.startDiscovery", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val deviceNameArg = args[0] as String
            var wrapped: List<Any?>
            try {
              api.startDiscovery(deviceNameArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.uwb.UwbHostApi.stopDiscovery", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              api.stopDiscovery()
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.uwb.UwbHostApi.startRanging", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val deviceArg = args[0] as UwbDevice
            var wrapped: List<Any?>
            try {
              api.startRanging(deviceArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.uwb.UwbHostApi.stopRanging", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val deviceArg = args[0] as UwbDevice
            var wrapped: List<Any?>
            try {
              api.stopRanging(deviceArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.uwb.UwbHostApi.handleConnectionRequest", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val deviceArg = args[0] as UwbDevice
            val acceptArg = args[1] as Boolean
            var wrapped: List<Any?>
            try {
              api.handleConnectionRequest(deviceArg, acceptArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
@Suppress("UNCHECKED_CAST")
private object UwbFlutterApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          UwbDevice.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is UwbDevice -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
@Suppress("UNCHECKED_CAST")
class UwbFlutterApi(private val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by UwbFlutterApi. */
    val codec: MessageCodec<Any?> by lazy {
      UwbFlutterApiCodec
    }
  }
  fun onDiscoveryDeviceFound(deviceArg: UwbDevice, callback: (Result<Unit>) -> Unit)
{
    val channelName = "dev.flutter.pigeon.uwb.UwbFlutterApi.onDiscoveryDeviceFound"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(deviceArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun onDiscoveryDeviceLost(deviceArg: UwbDevice, callback: (Result<Unit>) -> Unit)
{
    val channelName = "dev.flutter.pigeon.uwb.UwbFlutterApi.onDiscoveryDeviceLost"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(deviceArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun onDiscoveryDeviceConnected(deviceArg: UwbDevice, callback: (Result<Unit>) -> Unit)
{
    val channelName = "dev.flutter.pigeon.uwb.UwbFlutterApi.onDiscoveryDeviceConnected"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(deviceArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun onDiscoveryDeviceDisconnected(deviceArg: UwbDevice, callback: (Result<Unit>) -> Unit)
{
    val channelName = "dev.flutter.pigeon.uwb.UwbFlutterApi.onDiscoveryDeviceDisconnected"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(deviceArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun onDiscoveryDeviceRejected(deviceArg: UwbDevice, callback: (Result<Unit>) -> Unit)
{
    val channelName = "dev.flutter.pigeon.uwb.UwbFlutterApi.onDiscoveryDeviceRejected"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(deviceArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun onDiscoveryConnectionRequestReceived(deviceArg: UwbDevice, callback: (Result<Unit>) -> Unit)
{
    val channelName = "dev.flutter.pigeon.uwb.UwbFlutterApi.onDiscoveryConnectionRequestReceived"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(deviceArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun onUwbSessionStarted(deviceArg: UwbDevice, callback: (Result<Unit>) -> Unit)
{
    val channelName = "dev.flutter.pigeon.uwb.UwbFlutterApi.onUwbSessionStarted"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(deviceArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
  fun onUwbSessionDisconnected(deviceArg: UwbDevice, callback: (Result<Unit>) -> Unit)
{
    val channelName = "dev.flutter.pigeon.uwb.UwbFlutterApi.onUwbSessionDisconnected"
    val channel = BasicMessageChannel<Any?>(binaryMessenger, channelName, codec)
    channel.send(listOf(deviceArg)) {
      if (it is List<*>) {
        if (it.size > 1) {
          callback(Result.failure(FlutterError(it[0] as String, it[1] as String, it[2] as String?)))
        } else {
          callback(Result.success(Unit))
        }
      } else {
        callback(Result.failure(createConnectionError(channelName)))
      } 
    }
  }
}
